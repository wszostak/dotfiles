#!/bin/bash

set -e

###############################################################################
# Configuration
###############################################################################

DOTFILES_GIT_REPOSITORY="git@github.com:wszostak/dotfiles.git"
APT_PACKAGES="curl git imagemagick jq pwgen sqlite tmux vim wget zsh"
BREW_PACKAGES="git gnupg imagemagick jq pwgen python@3.9 sqlite tmux vim wget"

###############################################################################
# Functions
###############################################################################

function install_brew {
    echo "Installing Homebrew..."
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
}

function brew_install_packages {
    [ -x "$(command -v brew > /dev/null 2>&1)" ] && install_brew

    echo "Installing Homebrew packages..."

    # shellcheck disable=SC2086
    brew install ${BREW_PACKAGES}
}

function apt_install_packages {
    echo "Installing packages"

    # shellcheck disable=SC2086
    sudo apt-get update && sudo apt-get install -y ${APT_PACKAGES}
}

function display_packages {
    if [ "${OS_TYPE}" == "Linux" ]; then
        echo "${APT_PACKAGES}"
    else
        echo "${BREW_PACKAGES}"
    fi
}

function create_link {
    echo "${1}" â‡¢ "${2}"
    ln -fs "${1}" "${2}"
}

###############################################################################
# Detect OS
###############################################################################

OS_TYPE="$(uname -s)"

case "${OS_TYPE}" in
    Linux*)
        OS_TYPE="Linux"
        if [ !  -f "/etc/debian_version" ]; then
           [ -z "${skip_system_packages}" ] && no_system_packages
        fi
        ;;
    Darwin*)
        OS_TYPE="macOS"
        ;;
    *)
        OS_TYPE="Other"
        [ -z "${skip_system_packages}" ] && no_system_packages
        ;;
esac

###############################################################################
# Install packages
###############################################################################

cat << EOF
Packages installation
=====================

$(display_packages)

=====================
EOF

while true; do
  read -rp "Install packages? (y/n/s) " yn
  case "${yn}" in
    [Yy]*)
      if [ "${OS_TYPE}" == "Linux" ]; then
        apt_install_packages
      else
        brew_install_packages
      fi
      break;;
    [Ss]*) break;;
    [Nn]*) exit 0;;
    *) echo "Please answer y, s or n";;
  esac
done

###############################################################################
# Install oh-my-zsh
###############################################################################

[ ! -d "${HOME}/.oh-my-zsh" ] && git clone https://github.com/ohmyzsh/ohmyzsh.git "${HOME}/.oh-my-zsh"

###############################################################################
# Clone dotfiles
###############################################################################

read -rep $'\nWhere do you want to clone these dotfiles to [~/.dotfiles]? ' CLONE_PATH
CLONE_PATH="${CLONE_PATH:-"${HOME}/.dotfiles"}"

# Ensure path doesn't exist.
while [ -e "${CLONE_PATH}" ]; do
    read -rep $'\nPath exists, try again? (y) ' y
    case "${y}" in
        [Yy]*)

            break;;
        *) echo "Please answer y or CTRL+c the script to abort everything";;
    esac
done

if [ "${DEBUG}" == "1" ]; then
    cp -R "${PWD}/." "${CLONE_PATH}"
else
    git clone "${DOTFILES_GIT_REPOSITORY}" "${CLONE_PATH}"
fi

###############################################################################
# Personalize git user
###############################################################################

if [ ! -f "${HOME}/.gitconfig.user" ]; then
    echo "Personalize git user. Can leave empty. You can later edit file ~/.gitconfig.user manualy."

    read -rep $'\nGit user.name: ' GIT_USERNAME
    read -rep $'\nGit user.email: ' GIT_EMAIL

    cat > "${HOME}/.gitconfig.user" <<EOF
    [user]
        name = ${GIT_USERNAME}
        email = ${GIT_EMAIL}
EOF
fi;


###############################################################################
# create symlinks for all files in LINKS
###############################################################################

echo "Setting up symlinks:"

# Zsh
create_link "${CLONE_PATH}/zsh/.zshrc" "${HOME}/.zshrc"
create_link "${CLONE_PATH}/zsh/.zprofile" "${HOME}/.zprofile"

# Vim
create_link "${CLONE_PATH}/vim/.vimrc" "${HOME}/.vimrc"
create_link "${CLONE_PATH}/vim/.vim" "${HOME}/.vim"

# Git
create_link "${CLONE_PATH}/git/.gitconfig" "${HOME}/.gitconfig"
create_link "${CLONE_PATH}/git/.gitignore_global" "${HOME}/.gitignore_global"
create_link "${CLONE_PATH}/git/.gitk" "${HOME}/.gitk"


###############################################################################
# Change default shell to zsh
###############################################################################

[ "${OS_TYPE}" != "macOS" ] && chsh -s "$(command -v zsh)"

cat << EOF
Dotfiles was installed successfully!
EOF

exit 0